#!/bin/bash -e

# set up a base environment on centos or ubuntu


if [[ -n "$SCRIPTS_SETUP_BASE" ]] ; then
    return
fi
export SCRIPTPATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


# global variables
export DOWNLOADDIR="${HOME}/download"
if [[ -z ${LOGFILE} ]] ; then
    export LOGFILE=$(mktemp /tmp/setup.XXX.log)
fi
export RETURNVALUE=0
export RETURNITEMS=""


get_os() {
    local info="$(cat /etc/redhat-release 2> /dev/null ; cat /etc/lsb-release 2> /dev/null ; uname -a)"

    if echo "${info}" | grep -i -e centos -e "red hat" &> /dev/null ; then
        echo 'centos'
    elif echo "${info}" | grep -i -e ubuntu &> /dev/null ; then
        echo 'ubuntu'
    elif echo "${info}" | grep -i -e debian &> /dev/null ; then
        echo 'debian'
    fi
}

package_update() {
    local os=$(get_os)

    echo " update"
    if [[ ${os} == 'centos' ]] ; then
        sudo yum update &> /dev/null
    elif [[ ${os} == 'ubuntu' || ${os} == 'debian' ]] ; then
        sudo apt-get update &> /dev/null
    fi
}

package_install() {
    local os=$(get_os)

    for package in $@ ; do
        echo " ${package}" | tee -a "${LOGFILE}"
        if [[ ${os} == 'centos' ]] ; then
            sudo yum -y install ${package} &> /dev/null
        elif [[ ${os} == 'ubuntu' || ${os} == 'debian' ]] ; then
#            if [[ "${package}" == "ttf-mscorefonts-installer" ]] ; then
#                sudo debconf-set-selections <<< "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true"
#            fi
            sudo apt-get -y install ${package} "${package}" >> "${LOGFILE}" 2>&1
            dpkg --get-selections | grep "^${package}\s" >> "${LOGFILE}" 2>&1
            set_rvalue "${package}"
        fi
    done
}

file_install() {
    local file=${1}
    local dest=${2-~/}
    local tmpdir=

    echo " ${file}"
    # if file/directory doesn't exist, clone source
    if [[ ! -e "${file}" ]] ; then
        echo "  downloading..."
        tmpdir=$(mktemp -d --tmpdir sds.XXXXXXXXXX)
        pushd "${tmpdir}" &> /dev/null
        git clone -n git@github.com:kbatten/scripts.git --depth 1 &> /dev/null
        cd scripts &> /dev/null
        git checkout HEAD "${file}" &> /dev/null
    else
        pushd . &> /dev/null
    fi

    mkdir -p "${dest}" &> /dev/null
    cp -r -f "${file}" "${dest}" &> /dev/null || sudo cp -f -r "${file}" "${dest}" &> /dev/null
    result=${?}

    popd &> /dev/null
    if [[ -n "${tmpdir}" ]] ; then
        rm -rf "${tmpdir}"
    fi
}

set_variable() {
    local varname=${1}
    local varval=${2}
    grep "^export ${varname}=" ~/.bashrc &> /dev/null || echo "export ${varname}=" >> ~/.bashrc
    sed --in-place="" -e "s/^\(export ${varname}\)=.*$/\1=${varval}/" ~/.bashrc
}

rootname() {
    local filename="$(basename "${1}")"
    local extension="$(extname "${filename}")"
    echo "${filename%.${extension}}"
}

extname() {
    local filename="$(basename "${1}")"
    if [[ "$(echo "${filename}" | grep "\..*\." | sed 's/^.*\.\([^.]*\)\.[^.]*$/\1/')" == "tar" ]] ; then
        echo -n "tar."
    fi
    echo "${filename##*.}"
}

extract() {
    local filename=${1}
    local directory=${2}
    local extension=$(extname "${filename}")

    case "${extension}" in
        "tar.gz" | "tgz" | "tar.bz2")
            echo "  extracting..."
            tar xf "${filename}" &> /dev/null
            local directory_orig=$(basename $(tar tf "${filename}" | head -n1))
            if [[ "${directory_orig}" != "${directory}" ]]; then
                mv "${directory_orig}" "${directory}" &> /dev/null
            fi
            ;;
        "zip")
            echo "  extracting..."
            local tmpdir=$(mktemp -d --tmpdir sds.XXXXXXXXXX)
            unzip -d "${tmpdir}" "${filename}" &> /dev/null
            # if one directory in ${tmpdir}, move that to ${DOWNLOADDIR}/${directory}
            # otherwise move ${tmpdir} ${DOWNLOADDIR}/${directory}
            files=$(ls -A "${tmpdir}")
            files_count=$(echo "${files}" | wc -l)
            if [[ ${files_count} -eq 1 && -d "${tmpdir}/${files}" ]] ; then
                mv "${tmpdir}/${files}" "${directory}" &> /dev/null
                rm -rf "${tmpdir}" &> /dev/null
            else
                mv "${tmpdir}" "${directory}" &> /dev/null
            fi
            ;;
    esac
}

fetch_and_install() {
    local url=${1}
    local filename=${2}
    local directory=${3}
    local installer=${4}
    local finaldir=${5}

    if [[ -z "${filename}" ]] ; then
        filename=$(basename "${url}")
    fi
    if [[ -z "${directory}" ]] ; then
        directory=$(rootname "${filename}")
    fi
    if [[ -z "${finaldir}" ]] ; then
        finaldir="${HOME}/opt/${directory}"
    fi

    echo " ${filename}"

    # download and extract if needed
    mkdir -p "${DOWNLOADDIR}" &> /dev/null
    pushd "${DOWNLOADDIR}" &> /dev/null
    if [[ ! -e "${directory}" ]] ; then
        if [[ ! -e "${filename}" ]] ; then
            echo "  downloading..."
            wget "${url}" -O "${filename}" &> /dev/null
        fi
        extract "${filename}" "${directory}"
    fi
    if [[ "$(extname "${filename}")" == "msi" ]] ; then
        local auto=$(find "${SCRIPTPATH}" -name "$(rootname "${filename}")-auto.au3" | head -n1)
        echo "  installing..."
        if [[ -n "${auto}" ]] ; then
            echo "xvfb-run wine \"C:/Program Files/AutoIt3/AutoIt3.exe\" \"${auto}\"" >> "${LOGFILE}" 2>&1
            xvfb-run wine "C:/Program Files/AutoIt3/AutoIt3.exe" "${auto}" >> "${LOGFILE}" 2>&1
            sleep 1
        else
            echo "xvfb-run wine msiexec.exe /q /i \"${filename}\"" >> "${LOGFILE}" 2>&1
            xvfb-run wine msiexec.exe /q /i "${filename}" >> "${LOGFILE}" 2>&1
            sleep 1
        fi
    elif [[ "$(extname "${filename}")" == "exe" ]] ; then
        local auto=$(find "${SCRIPTPATH}" -name "$(rootname "${filename}")-auto.au3" | head -n1)
        echo "  installing..."
        if [[ -n "${auto}" ]] ; then
            echo "xvfb-run wine \"C:/Program Files/AutoIt3/AutoIt3.exe\" \"${auto}\"" >> "${LOGFILE}" 2>&1
            xvfb-run wine "C:/Program Files/AutoIt3/AutoIt3.exe" "${auto}" >> "${LOGFILE}" 2>&1
            sleep 1
        else
            echo "xvfb-run wine \"${filename}\" ${installer}" >> "${LOGFILE}" 2>&1
            xvfb-run wine "${filename}" ${installer} >> "${LOGFILE}" 2>&1
            sleep 1
        fi
    else
        if [[ ! -e "${finaldir}" ]] ; then
            mkdir -p "${finaldir}" &> /dev/null
            cp -r "${directory}"/* "${finaldir}" &> /dev/null
        fi
        cd "${finaldir}" &> /dev/null
        if [[ -n "${installer}" ]] ; then
            echo "  installing..."
            eval "${installer}" >> "${LOGFILE}" 2>&1
        fi
    fi

    popd &> /dev/null
}

function Xnpm_install {
    for package in $@ ; do
        echo " ${package}" | tee -a "${LOGFILE}"
        npm install "${package}" >> "${LOGFILE}" 2>&1
        ln -sf $(find "${HOME}/opt/" -type f -name "uglify*" 2> /dev/null) "${HOME}/bin/" >> "${LOGFILE}" 2>&1
        uglifyjs --version >> "${LOGFILE}" 2>&1
        set_rvalue
    done
}

# sets global return value based on !?
set_rvalue() {
    local rvalue=$?
    local itemname=${1}

    if [[ $rvalue -ne 0 ]] ; then
        RETURNVALUE=1
        if [[ -n ${itemname} ]] ; then
            RETURNITEMS=$(echo -e "${RETURNITEMS}\n${itemname}")
        fi
    fi
    return ${rvalue}
}

cleanup() {
    if [[ ${RETURNVALUE} -eq 0 ]] ; then
        rm -f "${LOGFILE}" &> /dev/null
    else
        echo
        echo "log: ${LOGFILE}"
        echo "${RETURNITEMS}"
    fi
}


cd "${SCRIPTPATH}"

RUNALL=true
if $RUNALL ; then
echo "*packages"
package_install git
package_install wget

echo "*config files"
file_install "dotfiles/.bash_aliases"
file_install "dotfiles/.bash_completion.d"
file_install "dotfiles/.gitconfig"
file_install "dotfiles/.gitignore"
file_install "dotfiles/.vimrc"

echo "*bin"
file_install "dev/profile_dirs" ~/bin
fi


cleanup
export SCRIPTS_SETUP_BASE=1
